Checks: >
  -*,
  readability-*,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  performance-*,
  modernize-*,
  -modernize-use-trailing-return-type,
  cppcoreguidelines*,
  misc-include-cleaner,
  misc-definitions-in-headers,
  misc-misleading-identifier,
  misc-throw-by-value-catch-by-reference,
  misc-static-assert,
  misc-non-copyable-objects,
  misc-redundant-expression,
  misc-unconventional-assign-operator,
  misc-use-anonymous-namespace,
  clang-analyzer-core-*,
  clang-analyzer-cplusplus-*,
  clang-analyzer-nullability-*,
  clang-analyzer-security-*,
  clang-analyzer-unix-*,
WarningsAsErrors: '*'
CheckOptions:
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.ClassMemberCase, value: camelBack }
  - { key: readability-identifier-naming.ClassMethodCase, value: camelBack }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: camelBack }
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.MethodCase, value: camelBack }
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  - { key: readability-identifier-naming.ParameterCase, value: camelBack }
  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  - { key: readability-identifier-naming.VariableCase, value: camelBack }
FormatStyle: file
